{"version":3,"names":["pkg","require","createEntitlementsPlugin","action","name","withUnknown","config","modResults","Object","defineProperty","value","withKeychainSharingGroups","setKeychainSharingGroups","_","entitlementsPlist","ios","associatedDomains","withCredentialSharing","props","androidPermissions","android","usesPermissionName","push","AndroidConfig","Permissions","withPermissions","version"],"sources":["withCredentialSharing.ts"],"sourcesContent":["\nimport { \n    withPlugins,\n    AndroidConfig,\n    ConfigPlugin,\n    createRunOncePlugin,\n    withEntitlementsPlist\n} from '@expo/config-plugins';\nimport type { ExpoConfig } from '@expo/config-types';\nimport type { JSONObject } from '@expo/json-file';\n// eslint-disable-next-line @typescript-eslint/no-var-requires, @typescript-eslint/no-unsafe-assignment\nconst pkg = require('../../../package.json');\n\ntype Props = {\n  android?: {\n      usesPermissionName: string;\n      providerName: string;\n  },\n  ios?: {\n      accessGroupName: string;\n      otherValue: string;\n  }\n};\n\ntype MutateEntitlementsPlistAction = (expo: ExpoConfig, entitlements: JSONObject) => JSONObject;\n\nexport function createEntitlementsPlugin(\n  action: MutateEntitlementsPlistAction,\n  name: string\n): ConfigPlugin {\n  const withUnknown: ConfigPlugin = config =>\n    withEntitlementsPlist(config, async config => {\n      config.modResults = await action(config, config.modResults);\n      return config;\n    });\n  if (name) {\n    Object.defineProperty(withUnknown, 'name', {\n      value: name,\n    });\n  }\n  return withUnknown;\n}\n\n\nexport const withKeychainSharingGroups = createEntitlementsPlugin(\n  setKeychainSharingGroups,\n  'withKeychainSharingGroups'\n);\n\nexport function setKeychainSharingGroups(\n  config: ExpoConfig,\n  { 'keychain-access-groups': _, ...entitlementsPlist }: JSONObject\n): JSONObject {\n  if (config.ios?.associatedDomains) {\n    return {\n      ...entitlementsPlist,\n      'keychain-access-groups': ['$(AppIdentifierPrefix)com.pinterest.enterprise'],\n    };\n  }\n\n  return entitlementsPlist;\n}\n\nconst withCredentialSharing: ConfigPlugin<Props> = (config, props = {}) => {\n  const androidPermissions = [];\n  if (props.android) {\n    if (props.android.usesPermissionName) {\n      androidPermissions.push(props.android.usesPermissionName)\n    }\n    // TODO: handle providerName\n  }\n  if (props.ios) {\n      // TODO: handle accessGroupName\n  }\n\n  return withPlugins(\n      config,\n      [\n        [AndroidConfig.Permissions.withPermissions, androidPermissions],\n        withKeychainSharingGroups\n      ]\n    );\n};\n\nexport default createRunOncePlugin(withCredentialSharing, pkg.name, pkg.version);"],"mappings":";;;;;;;;;;AACA;;AASA;AACA,MAAMA,GAAG,GAAGC,OAAO,CAAC,uBAAD,CAAnB;;AAeO,SAASC,wBAAT,CACLC,MADK,EAELC,IAFK,EAGS;EACd,MAAMC,WAAyB,GAAGC,MAAM,IACtC,0CAAsBA,MAAtB,EAA8B,MAAMA,MAAN,IAAgB;IAC5CA,MAAM,CAACC,UAAP,GAAoB,MAAMJ,MAAM,CAACG,MAAD,EAASA,MAAM,CAACC,UAAhB,CAAhC;IACA,OAAOD,MAAP;EACD,CAHD,CADF;;EAKA,IAAIF,IAAJ,EAAU;IACRI,MAAM,CAACC,cAAP,CAAsBJ,WAAtB,EAAmC,MAAnC,EAA2C;MACzCK,KAAK,EAAEN;IADkC,CAA3C;EAGD;;EACD,OAAOC,WAAP;AACD;;AAGM,MAAMM,yBAAyB,GAAGT,wBAAwB,CAC/DU,wBAD+D,EAE/D,2BAF+D,CAA1D;;;AAKA,SAASA,wBAAT,CACLN,MADK,QAGO;EAAA;;EAAA,IADZ;IAAE,0BAA0BO,CAA5B;IAA+B,GAAGC;EAAlC,CACY;;EACZ,mBAAIR,MAAM,CAACS,GAAX,wCAAI,YAAYC,iBAAhB,EAAmC;IACjC,OAAO,EACL,GAAGF,iBADE;MAEL,0BAA0B,CAAC,gDAAD;IAFrB,CAAP;EAID;;EAED,OAAOA,iBAAP;AACD;;AAED,MAAMG,qBAA0C,GAAG,UAACX,MAAD,EAAwB;EAAA,IAAfY,KAAe,uEAAP,EAAO;EACzE,MAAMC,kBAAkB,GAAG,EAA3B;;EACA,IAAID,KAAK,CAACE,OAAV,EAAmB;IACjB,IAAIF,KAAK,CAACE,OAAN,CAAcC,kBAAlB,EAAsC;MACpCF,kBAAkB,CAACG,IAAnB,CAAwBJ,KAAK,CAACE,OAAN,CAAcC,kBAAtC;IACD,CAHgB,CAIjB;;EACD;;EACD,IAAIH,KAAK,CAACH,GAAV,EAAe,CACX;EACH;;EAED,OAAO,gCACHT,MADG,EAEH,CACE,CAACiB,6BAAcC,WAAd,CAA0BC,eAA3B,EAA4CN,kBAA5C,CADF,EAEER,yBAFF,CAFG,CAAP;AAOD,CAnBD;;eAqBe,wCAAoBM,qBAApB,EAA2CjB,GAAG,CAACI,IAA/C,EAAqDJ,GAAG,CAAC0B,OAAzD,C"}